Vue d'ensemble
Ce fichier contient le modèle principal d'intelligence artificielle pour l'optimisation des promotions commerciales. Il s'agit du "cerveau" du système qui analyse les données réelles d'entreprise et prédit les promotions optimales.

Structure principale de la classe RealDataPromotionModel
1. Initialisation du modèle
def __init__(self):
    self.models = {}                    # Stockage des modèles IA
    self.encoders = {}                  # Encodeurs pour variables catégorielles
    self.scaler = StandardScaler()      # Normalisation des données
    self.feature_importance = {}        # Importance des caractéristiques
    self.seasonal_patterns = {}         # Modèles saisonniers
    self.base_date = datetime.now()     # Date de référence



2. Extraction des caractéristiques temporelles
Méthode extract_date_features(target_date)
Cette fonction convertit une date en caractéristiques numériques pour l'IA :

date_features = {
    "year": 2025,
    "month": 12,
    "day": 25,
    "day_of_week": 3,           # 0=Lundi, 6=Dimanche
    "quarter": 4,               # Trimestre
    "is_weekend": 0,            # 1 si weekend
    "is_ramadan_season": 1,     # Période du Ramadan
    "is_summer_season": 0,      # Saison d'été
    "is_holiday_season": 1,     # Période de fêtes
}

Facteurs saisonniers calculés
Multiplicateur de demande saisonnière : Ajuste selon le mois

Janvier: 0.8 (post-fêtes, demande faible)
Juillet: 1.4 (pic été)
Décembre: 1.5 (période de fêtes)
Intensité de la concurrence selon la période

Été/Décembre: 0.9 (forte concurrence)
Périodes normales: 0.5 (concurrence modérée)
3. Chargement et analyse des données réelles
Méthode load_real_business_data()

# Charge le fichier Excel avec les vraies données
df = pd.read_excel("complete_business_dataset.xlsx")

# Analyse automatique des données
print(f"Total Produits: {df.shape[0]:,}")
print(f"Chiffre d'affaires mensuel: {df['CA_Mensuel_TND'].sum():,.2f} TND")
print(f"Prix moyen: {df['Prix_Vente_TND'].mean():.2f} TND")

4. Calcul des promotions optimales
Méthode calculate_real_optimal_promotions()
Algorithme en 6 étapes utilisant uniquement des données réelles :

Facteur de déstockage (0-30%)


stock_months = Stock_Actuel / Ventes_Mensuelles
stock_factor = (stock_months - 3) / 10  # Plus de stock = plus de promo


Protection de la marge (0-25%)
margin_factor = (Marge_Pourcentage - 30) / 100
# Marge élevée = plus de flexibilité promo

Élasticité prix (0-20%)
elasticity_factor = abs(Elasticite_Prix) / 5
# Plus élastique = plus réactif aux promos


Pression concurrentielle (0-15%)

competition_factor = Facteur_Concurrence * 0.15

Performance historique (0-10%)

hist_performance = (Derniere_Promo_Performance - 1) * 0.1

Tendance des ventes (0-10%)

trend_factor = abs(Tendance_Ventes_3M) * 0.5  # Si ventes en baisse


Formule finale


promotion_optimale = (
    stock_factor * 0.25 +          # 25% poids - gestion stock
    margin_factor * 0.20 +         # 20% poids - protection profit  
    elasticity_factor * 0.20 +     # 20% poids - sensibilité client
    competition_factor * 0.15 +    # 15% poids - pression marché
    hist_performance * 0.10 +      # 10% poids - performance passée
    trend_factor * 0.10            # 10% poids - tendances
)


5. Entraînement des modèles IA
Méthode train_models()
Utilise 4 algorithmes d'apprentissage automatique :



models = {
    "Random Forest": RandomForestRegressor(n_estimators=150),
    "Gradient Boosting": GradientBoostingRegressor(n_estimators=150), 
    "XGBoost": xgb.XGBRegressor(n_estimators=150),
    "LightGBM": lgb.LGBMRegressor(n_estimators=150)
}


Le système compare automatiquement les performances et sélectionne le meilleur modèle selon le score R².

6. Prédiction pour une date spécifique
Méthode predict_promotion_for_date(article_code, target_date)
Processus en 7 étapes :

Recherche de l'article dans la base de données
Extraction des caractéristiques temporelles de la date cible
Prédiction de base par le modèle IA
Ajustements temporels selon la date :


if date_features["is_holiday_season"]:
    temporal_adjustment *= 1.2    # +20% pendant les fêtes
if date_features["is_weekend"]:
    temporal_adjustment *= 1.05   # +5% le weekend


Calcul de l'impact commercial :
Nouveau volume = volume_actuel × (1 + élasticité × promotion)
Nouveau prix = prix_actuel × (1 - promotion)
Nouveaux revenus et profits
Évaluation des risques (FAIBLE/MOYEN/ÉLEVÉ)
Génération du rapport détaillé
7. Fonctionnalités avancées
Prédictions multiples
predict_multiple_articles_for_date() : Plusieurs articles, une date
predict_article_calendar() : Un article, plusieurs dates
Calendrier promotionnel



# Analyse sur 3 mois avec intervalles hebdomadaires
calendar_df = model.predict_article_calendar(
    "ARTICLE123", 
    "2025-06-01", 
    "2025-08-31"
)


8. Calcul de l'impact commercial
Méthode calculate_business_impact()
Métriques calculées automatiquement :


impact_analysis = {
    "Prix_Promo_TND": new_prices,
    "Ventes_Projetees": new_volumes, 
    "CA_Projete_TND": new_revenue,
    "Profit_Projete_TND": new_profit,
    "Impact_CA_TND": revenue_change,
    "Impact_Profit_TND": profit_change,
    "Impact_Volume_Pct": volume_change_percent
}


9. Sauvegarde et exports
Génération automatique de fichiers Excel :
Feuille 1 : Recommandations détaillées par produit
Feuille 2 : Résumé exécutif avec KPIs
Feuille 3 : Analyse par catégorie
10. Avantages techniques
✅ Données réelles uniquement - Aucune valeur simulée
✅ Prédictions temporelles - Analyse selon dates spécifiques
✅ Multiple algorithmes IA - Sélection automatique du meilleur
✅ Ajustements saisonniers - Facteurs culturels tunisiens
✅ Évaluation des risques - Protection des marges
✅ Calculs financiers précis - Impact sur revenus et profits
✅ Interface flexible - API pour intégration

Ce modèle transforme les données commerciales complexes en recommandations promotionnelles intelligentes et précises, optimisant automatiquement les performances business selon les contraintes temporelles et financières.



